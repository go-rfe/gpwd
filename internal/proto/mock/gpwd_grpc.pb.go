// Code generated by MockGen. DO NOT EDIT.
// Source: internal/proto/gpwd_grpc.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	proto "github.com/go-rfe/gpwd/internal/proto"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockSecretsClient is a mock of SecretsClient interface.
type MockSecretsClient struct {
	ctrl     *gomock.Controller
	recorder *MockSecretsClientMockRecorder
}

// MockSecretsClientMockRecorder is the mock recorder for MockSecretsClient.
type MockSecretsClientMockRecorder struct {
	mock *MockSecretsClient
}

// NewMockSecretsClient creates a new mock instance.
func NewMockSecretsClient(ctrl *gomock.Controller) *MockSecretsClient {
	mock := &MockSecretsClient{ctrl: ctrl}
	mock.recorder = &MockSecretsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretsClient) EXPECT() *MockSecretsClientMockRecorder {
	return m.recorder
}

// CreateSecret mocks base method.
func (m *MockSecretsClient) CreateSecret(ctx context.Context, in *proto.CreateSecretRequest, opts ...grpc.CallOption) (*proto.CreateSecretResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSecret", varargs...)
	ret0, _ := ret[0].(*proto.CreateSecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecret indicates an expected call of CreateSecret.
func (mr *MockSecretsClientMockRecorder) CreateSecret(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecret", reflect.TypeOf((*MockSecretsClient)(nil).CreateSecret), varargs...)
}

// DeleteSecret mocks base method.
func (m *MockSecretsClient) DeleteSecret(ctx context.Context, in *proto.DeleteSecretRequest, opts ...grpc.CallOption) (*proto.DeleteSecretResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSecret", varargs...)
	ret0, _ := ret[0].(*proto.DeleteSecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSecret indicates an expected call of DeleteSecret.
func (mr *MockSecretsClientMockRecorder) DeleteSecret(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockSecretsClient)(nil).DeleteSecret), varargs...)
}

// GetSecret mocks base method.
func (m *MockSecretsClient) GetSecret(ctx context.Context, in *proto.GetSecretRequest, opts ...grpc.CallOption) (*proto.GetSecretResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSecret", varargs...)
	ret0, _ := ret[0].(*proto.GetSecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockSecretsClientMockRecorder) GetSecret(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockSecretsClient)(nil).GetSecret), varargs...)
}

// ListSecrets mocks base method.
func (m *MockSecretsClient) ListSecrets(ctx context.Context, in *proto.ListSecretsRequest, opts ...grpc.CallOption) (*proto.ListSecretsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSecrets", varargs...)
	ret0, _ := ret[0].(*proto.ListSecretsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecrets indicates an expected call of ListSecrets.
func (mr *MockSecretsClientMockRecorder) ListSecrets(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecrets", reflect.TypeOf((*MockSecretsClient)(nil).ListSecrets), varargs...)
}

// UpdateSecret mocks base method.
func (m *MockSecretsClient) UpdateSecret(ctx context.Context, in *proto.UpdateSecretRequest, opts ...grpc.CallOption) (*proto.UpdateSecretResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSecret", varargs...)
	ret0, _ := ret[0].(*proto.UpdateSecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSecret indicates an expected call of UpdateSecret.
func (mr *MockSecretsClientMockRecorder) UpdateSecret(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecret", reflect.TypeOf((*MockSecretsClient)(nil).UpdateSecret), varargs...)
}

// MockSecretsServer is a mock of SecretsServer interface.
type MockSecretsServer struct {
	ctrl     *gomock.Controller
	recorder *MockSecretsServerMockRecorder
}

// MockSecretsServerMockRecorder is the mock recorder for MockSecretsServer.
type MockSecretsServerMockRecorder struct {
	mock *MockSecretsServer
}

// NewMockSecretsServer creates a new mock instance.
func NewMockSecretsServer(ctrl *gomock.Controller) *MockSecretsServer {
	mock := &MockSecretsServer{ctrl: ctrl}
	mock.recorder = &MockSecretsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretsServer) EXPECT() *MockSecretsServerMockRecorder {
	return m.recorder
}

// CreateSecret mocks base method.
func (m *MockSecretsServer) CreateSecret(arg0 context.Context, arg1 *proto.CreateSecretRequest) (*proto.CreateSecretResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecret", arg0, arg1)
	ret0, _ := ret[0].(*proto.CreateSecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecret indicates an expected call of CreateSecret.
func (mr *MockSecretsServerMockRecorder) CreateSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecret", reflect.TypeOf((*MockSecretsServer)(nil).CreateSecret), arg0, arg1)
}

// DeleteSecret mocks base method.
func (m *MockSecretsServer) DeleteSecret(arg0 context.Context, arg1 *proto.DeleteSecretRequest) (*proto.DeleteSecretResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecret", arg0, arg1)
	ret0, _ := ret[0].(*proto.DeleteSecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSecret indicates an expected call of DeleteSecret.
func (mr *MockSecretsServerMockRecorder) DeleteSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockSecretsServer)(nil).DeleteSecret), arg0, arg1)
}

// GetSecret mocks base method.
func (m *MockSecretsServer) GetSecret(arg0 context.Context, arg1 *proto.GetSecretRequest) (*proto.GetSecretResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetSecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockSecretsServerMockRecorder) GetSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockSecretsServer)(nil).GetSecret), arg0, arg1)
}

// ListSecrets mocks base method.
func (m *MockSecretsServer) ListSecrets(arg0 context.Context, arg1 *proto.ListSecretsRequest) (*proto.ListSecretsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecrets", arg0, arg1)
	ret0, _ := ret[0].(*proto.ListSecretsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecrets indicates an expected call of ListSecrets.
func (mr *MockSecretsServerMockRecorder) ListSecrets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecrets", reflect.TypeOf((*MockSecretsServer)(nil).ListSecrets), arg0, arg1)
}

// UpdateSecret mocks base method.
func (m *MockSecretsServer) UpdateSecret(arg0 context.Context, arg1 *proto.UpdateSecretRequest) (*proto.UpdateSecretResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecret", arg0, arg1)
	ret0, _ := ret[0].(*proto.UpdateSecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSecret indicates an expected call of UpdateSecret.
func (mr *MockSecretsServerMockRecorder) UpdateSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecret", reflect.TypeOf((*MockSecretsServer)(nil).UpdateSecret), arg0, arg1)
}

// mustEmbedUnimplementedSecretsServer mocks base method.
func (m *MockSecretsServer) mustEmbedUnimplementedSecretsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSecretsServer")
}

// mustEmbedUnimplementedSecretsServer indicates an expected call of mustEmbedUnimplementedSecretsServer.
func (mr *MockSecretsServerMockRecorder) mustEmbedUnimplementedSecretsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSecretsServer", reflect.TypeOf((*MockSecretsServer)(nil).mustEmbedUnimplementedSecretsServer))
}

// MockUnsafeSecretsServer is a mock of UnsafeSecretsServer interface.
type MockUnsafeSecretsServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeSecretsServerMockRecorder
}

// MockUnsafeSecretsServerMockRecorder is the mock recorder for MockUnsafeSecretsServer.
type MockUnsafeSecretsServerMockRecorder struct {
	mock *MockUnsafeSecretsServer
}

// NewMockUnsafeSecretsServer creates a new mock instance.
func NewMockUnsafeSecretsServer(ctrl *gomock.Controller) *MockUnsafeSecretsServer {
	mock := &MockUnsafeSecretsServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeSecretsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeSecretsServer) EXPECT() *MockUnsafeSecretsServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedSecretsServer mocks base method.
func (m *MockUnsafeSecretsServer) mustEmbedUnimplementedSecretsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSecretsServer")
}

// mustEmbedUnimplementedSecretsServer indicates an expected call of mustEmbedUnimplementedSecretsServer.
func (mr *MockUnsafeSecretsServerMockRecorder) mustEmbedUnimplementedSecretsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSecretsServer", reflect.TypeOf((*MockUnsafeSecretsServer)(nil).mustEmbedUnimplementedSecretsServer))
}

// MockAccountsClient is a mock of AccountsClient interface.
type MockAccountsClient struct {
	ctrl     *gomock.Controller
	recorder *MockAccountsClientMockRecorder
}

// MockAccountsClientMockRecorder is the mock recorder for MockAccountsClient.
type MockAccountsClientMockRecorder struct {
	mock *MockAccountsClient
}

// NewMockAccountsClient creates a new mock instance.
func NewMockAccountsClient(ctrl *gomock.Controller) *MockAccountsClient {
	mock := &MockAccountsClient{ctrl: ctrl}
	mock.recorder = &MockAccountsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountsClient) EXPECT() *MockAccountsClientMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockAccountsClient) CreateAccount(ctx context.Context, in *proto.CreateAccountRequest, opts ...grpc.CallOption) (*proto.CreateAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAccount", varargs...)
	ret0, _ := ret[0].(*proto.CreateAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockAccountsClientMockRecorder) CreateAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockAccountsClient)(nil).CreateAccount), varargs...)
}

// DeleteAccount mocks base method.
func (m *MockAccountsClient) DeleteAccount(ctx context.Context, in *proto.DeleteAccountRequest, opts ...grpc.CallOption) (*proto.DeleteAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAccount", varargs...)
	ret0, _ := ret[0].(*proto.DeleteAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockAccountsClientMockRecorder) DeleteAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockAccountsClient)(nil).DeleteAccount), varargs...)
}

// GetAccount mocks base method.
func (m *MockAccountsClient) GetAccount(ctx context.Context, in *proto.GetAccountRequest, opts ...grpc.CallOption) (*proto.GetAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccount", varargs...)
	ret0, _ := ret[0].(*proto.GetAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockAccountsClientMockRecorder) GetAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountsClient)(nil).GetAccount), varargs...)
}

// UpdateAccount mocks base method.
func (m *MockAccountsClient) UpdateAccount(ctx context.Context, in *proto.UpdateAccountRequest, opts ...grpc.CallOption) (*proto.UpdateAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAccount", varargs...)
	ret0, _ := ret[0].(*proto.UpdateAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccount indicates an expected call of UpdateAccount.
func (mr *MockAccountsClientMockRecorder) UpdateAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockAccountsClient)(nil).UpdateAccount), varargs...)
}

// MockAccountsServer is a mock of AccountsServer interface.
type MockAccountsServer struct {
	ctrl     *gomock.Controller
	recorder *MockAccountsServerMockRecorder
}

// MockAccountsServerMockRecorder is the mock recorder for MockAccountsServer.
type MockAccountsServerMockRecorder struct {
	mock *MockAccountsServer
}

// NewMockAccountsServer creates a new mock instance.
func NewMockAccountsServer(ctrl *gomock.Controller) *MockAccountsServer {
	mock := &MockAccountsServer{ctrl: ctrl}
	mock.recorder = &MockAccountsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountsServer) EXPECT() *MockAccountsServerMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockAccountsServer) CreateAccount(arg0 context.Context, arg1 *proto.CreateAccountRequest) (*proto.CreateAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", arg0, arg1)
	ret0, _ := ret[0].(*proto.CreateAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockAccountsServerMockRecorder) CreateAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockAccountsServer)(nil).CreateAccount), arg0, arg1)
}

// DeleteAccount mocks base method.
func (m *MockAccountsServer) DeleteAccount(arg0 context.Context, arg1 *proto.DeleteAccountRequest) (*proto.DeleteAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", arg0, arg1)
	ret0, _ := ret[0].(*proto.DeleteAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockAccountsServerMockRecorder) DeleteAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockAccountsServer)(nil).DeleteAccount), arg0, arg1)
}

// GetAccount mocks base method.
func (m *MockAccountsServer) GetAccount(arg0 context.Context, arg1 *proto.GetAccountRequest) (*proto.GetAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockAccountsServerMockRecorder) GetAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountsServer)(nil).GetAccount), arg0, arg1)
}

// UpdateAccount mocks base method.
func (m *MockAccountsServer) UpdateAccount(arg0 context.Context, arg1 *proto.UpdateAccountRequest) (*proto.UpdateAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccount", arg0, arg1)
	ret0, _ := ret[0].(*proto.UpdateAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccount indicates an expected call of UpdateAccount.
func (mr *MockAccountsServerMockRecorder) UpdateAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockAccountsServer)(nil).UpdateAccount), arg0, arg1)
}

// mustEmbedUnimplementedAccountsServer mocks base method.
func (m *MockAccountsServer) mustEmbedUnimplementedAccountsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAccountsServer")
}

// mustEmbedUnimplementedAccountsServer indicates an expected call of mustEmbedUnimplementedAccountsServer.
func (mr *MockAccountsServerMockRecorder) mustEmbedUnimplementedAccountsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAccountsServer", reflect.TypeOf((*MockAccountsServer)(nil).mustEmbedUnimplementedAccountsServer))
}

// MockUnsafeAccountsServer is a mock of UnsafeAccountsServer interface.
type MockUnsafeAccountsServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeAccountsServerMockRecorder
}

// MockUnsafeAccountsServerMockRecorder is the mock recorder for MockUnsafeAccountsServer.
type MockUnsafeAccountsServerMockRecorder struct {
	mock *MockUnsafeAccountsServer
}

// NewMockUnsafeAccountsServer creates a new mock instance.
func NewMockUnsafeAccountsServer(ctrl *gomock.Controller) *MockUnsafeAccountsServer {
	mock := &MockUnsafeAccountsServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeAccountsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeAccountsServer) EXPECT() *MockUnsafeAccountsServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedAccountsServer mocks base method.
func (m *MockUnsafeAccountsServer) mustEmbedUnimplementedAccountsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAccountsServer")
}

// mustEmbedUnimplementedAccountsServer indicates an expected call of mustEmbedUnimplementedAccountsServer.
func (mr *MockUnsafeAccountsServerMockRecorder) mustEmbedUnimplementedAccountsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAccountsServer", reflect.TypeOf((*MockUnsafeAccountsServer)(nil).mustEmbedUnimplementedAccountsServer))
}

// MockLoginClient is a mock of LoginClient interface.
type MockLoginClient struct {
	ctrl     *gomock.Controller
	recorder *MockLoginClientMockRecorder
}

// MockLoginClientMockRecorder is the mock recorder for MockLoginClient.
type MockLoginClientMockRecorder struct {
	mock *MockLoginClient
}

// NewMockLoginClient creates a new mock instance.
func NewMockLoginClient(ctrl *gomock.Controller) *MockLoginClient {
	mock := &MockLoginClient{ctrl: ctrl}
	mock.recorder = &MockLoginClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginClient) EXPECT() *MockLoginClientMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockLoginClient) Login(ctx context.Context, in *proto.LoginRequest, opts ...grpc.CallOption) (*proto.LoginResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Login", varargs...)
	ret0, _ := ret[0].(*proto.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockLoginClientMockRecorder) Login(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockLoginClient)(nil).Login), varargs...)
}

// RegisterAccount mocks base method.
func (m *MockLoginClient) RegisterAccount(ctx context.Context, in *proto.RegisterAccountRequest, opts ...grpc.CallOption) (*proto.RegisterAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterAccount", varargs...)
	ret0, _ := ret[0].(*proto.RegisterAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterAccount indicates an expected call of RegisterAccount.
func (mr *MockLoginClientMockRecorder) RegisterAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAccount", reflect.TypeOf((*MockLoginClient)(nil).RegisterAccount), varargs...)
}

// MockLoginServer is a mock of LoginServer interface.
type MockLoginServer struct {
	ctrl     *gomock.Controller
	recorder *MockLoginServerMockRecorder
}

// MockLoginServerMockRecorder is the mock recorder for MockLoginServer.
type MockLoginServerMockRecorder struct {
	mock *MockLoginServer
}

// NewMockLoginServer creates a new mock instance.
func NewMockLoginServer(ctrl *gomock.Controller) *MockLoginServer {
	mock := &MockLoginServer{ctrl: ctrl}
	mock.recorder = &MockLoginServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginServer) EXPECT() *MockLoginServerMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockLoginServer) Login(arg0 context.Context, arg1 *proto.LoginRequest) (*proto.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(*proto.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockLoginServerMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockLoginServer)(nil).Login), arg0, arg1)
}

// RegisterAccount mocks base method.
func (m *MockLoginServer) RegisterAccount(arg0 context.Context, arg1 *proto.RegisterAccountRequest) (*proto.RegisterAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAccount", arg0, arg1)
	ret0, _ := ret[0].(*proto.RegisterAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterAccount indicates an expected call of RegisterAccount.
func (mr *MockLoginServerMockRecorder) RegisterAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAccount", reflect.TypeOf((*MockLoginServer)(nil).RegisterAccount), arg0, arg1)
}

// mustEmbedUnimplementedLoginServer mocks base method.
func (m *MockLoginServer) mustEmbedUnimplementedLoginServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedLoginServer")
}

// mustEmbedUnimplementedLoginServer indicates an expected call of mustEmbedUnimplementedLoginServer.
func (mr *MockLoginServerMockRecorder) mustEmbedUnimplementedLoginServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedLoginServer", reflect.TypeOf((*MockLoginServer)(nil).mustEmbedUnimplementedLoginServer))
}

// MockUnsafeLoginServer is a mock of UnsafeLoginServer interface.
type MockUnsafeLoginServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeLoginServerMockRecorder
}

// MockUnsafeLoginServerMockRecorder is the mock recorder for MockUnsafeLoginServer.
type MockUnsafeLoginServerMockRecorder struct {
	mock *MockUnsafeLoginServer
}

// NewMockUnsafeLoginServer creates a new mock instance.
func NewMockUnsafeLoginServer(ctrl *gomock.Controller) *MockUnsafeLoginServer {
	mock := &MockUnsafeLoginServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeLoginServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeLoginServer) EXPECT() *MockUnsafeLoginServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedLoginServer mocks base method.
func (m *MockUnsafeLoginServer) mustEmbedUnimplementedLoginServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedLoginServer")
}

// mustEmbedUnimplementedLoginServer indicates an expected call of mustEmbedUnimplementedLoginServer.
func (mr *MockUnsafeLoginServerMockRecorder) mustEmbedUnimplementedLoginServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedLoginServer", reflect.TypeOf((*MockUnsafeLoginServer)(nil).mustEmbedUnimplementedLoginServer))
}

// MockSyncClient is a mock of SyncClient interface.
type MockSyncClient struct {
	ctrl     *gomock.Controller
	recorder *MockSyncClientMockRecorder
}

// MockSyncClientMockRecorder is the mock recorder for MockSyncClient.
type MockSyncClientMockRecorder struct {
	mock *MockSyncClient
}

// NewMockSyncClient creates a new mock instance.
func NewMockSyncClient(ctrl *gomock.Controller) *MockSyncClient {
	mock := &MockSyncClient{ctrl: ctrl}
	mock.recorder = &MockSyncClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncClient) EXPECT() *MockSyncClientMockRecorder {
	return m.recorder
}

// Sync mocks base method.
func (m *MockSyncClient) Sync(ctx context.Context, in *proto.SyncRequest, opts ...grpc.CallOption) (proto.Sync_SyncClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Sync", varargs...)
	ret0, _ := ret[0].(proto.Sync_SyncClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sync indicates an expected call of Sync.
func (mr *MockSyncClientMockRecorder) Sync(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockSyncClient)(nil).Sync), varargs...)
}

// SyncCreated mocks base method.
func (m *MockSyncClient) SyncCreated(ctx context.Context, opts ...grpc.CallOption) (proto.Sync_SyncCreatedClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SyncCreated", varargs...)
	ret0, _ := ret[0].(proto.Sync_SyncCreatedClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncCreated indicates an expected call of SyncCreated.
func (mr *MockSyncClientMockRecorder) SyncCreated(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncCreated", reflect.TypeOf((*MockSyncClient)(nil).SyncCreated), varargs...)
}

// SyncDeleted mocks base method.
func (m *MockSyncClient) SyncDeleted(ctx context.Context, opts ...grpc.CallOption) (proto.Sync_SyncDeletedClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SyncDeleted", varargs...)
	ret0, _ := ret[0].(proto.Sync_SyncDeletedClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncDeleted indicates an expected call of SyncDeleted.
func (mr *MockSyncClientMockRecorder) SyncDeleted(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncDeleted", reflect.TypeOf((*MockSyncClient)(nil).SyncDeleted), varargs...)
}

// SyncUpdated mocks base method.
func (m *MockSyncClient) SyncUpdated(ctx context.Context, opts ...grpc.CallOption) (proto.Sync_SyncUpdatedClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SyncUpdated", varargs...)
	ret0, _ := ret[0].(proto.Sync_SyncUpdatedClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncUpdated indicates an expected call of SyncUpdated.
func (mr *MockSyncClientMockRecorder) SyncUpdated(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncUpdated", reflect.TypeOf((*MockSyncClient)(nil).SyncUpdated), varargs...)
}

// MockSync_SyncClient is a mock of Sync_SyncClient interface.
type MockSync_SyncClient struct {
	ctrl     *gomock.Controller
	recorder *MockSync_SyncClientMockRecorder
}

// MockSync_SyncClientMockRecorder is the mock recorder for MockSync_SyncClient.
type MockSync_SyncClientMockRecorder struct {
	mock *MockSync_SyncClient
}

// NewMockSync_SyncClient creates a new mock instance.
func NewMockSync_SyncClient(ctrl *gomock.Controller) *MockSync_SyncClient {
	mock := &MockSync_SyncClient{ctrl: ctrl}
	mock.recorder = &MockSync_SyncClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSync_SyncClient) EXPECT() *MockSync_SyncClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockSync_SyncClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockSync_SyncClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockSync_SyncClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockSync_SyncClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSync_SyncClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSync_SyncClient)(nil).Context))
}

// Header mocks base method.
func (m *MockSync_SyncClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockSync_SyncClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockSync_SyncClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockSync_SyncClient) Recv() (*proto.SyncResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*proto.SyncResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockSync_SyncClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockSync_SyncClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockSync_SyncClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSync_SyncClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSync_SyncClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockSync_SyncClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSync_SyncClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSync_SyncClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockSync_SyncClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockSync_SyncClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockSync_SyncClient)(nil).Trailer))
}

// MockSync_SyncDeletedClient is a mock of Sync_SyncDeletedClient interface.
type MockSync_SyncDeletedClient struct {
	ctrl     *gomock.Controller
	recorder *MockSync_SyncDeletedClientMockRecorder
}

// MockSync_SyncDeletedClientMockRecorder is the mock recorder for MockSync_SyncDeletedClient.
type MockSync_SyncDeletedClientMockRecorder struct {
	mock *MockSync_SyncDeletedClient
}

// NewMockSync_SyncDeletedClient creates a new mock instance.
func NewMockSync_SyncDeletedClient(ctrl *gomock.Controller) *MockSync_SyncDeletedClient {
	mock := &MockSync_SyncDeletedClient{ctrl: ctrl}
	mock.recorder = &MockSync_SyncDeletedClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSync_SyncDeletedClient) EXPECT() *MockSync_SyncDeletedClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method.
func (m *MockSync_SyncDeletedClient) CloseAndRecv() (*proto.SyncResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*proto.SyncResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv.
func (mr *MockSync_SyncDeletedClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockSync_SyncDeletedClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method.
func (m *MockSync_SyncDeletedClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockSync_SyncDeletedClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockSync_SyncDeletedClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockSync_SyncDeletedClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSync_SyncDeletedClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSync_SyncDeletedClient)(nil).Context))
}

// Header mocks base method.
func (m *MockSync_SyncDeletedClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockSync_SyncDeletedClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockSync_SyncDeletedClient)(nil).Header))
}

// RecvMsg mocks base method.
func (m_2 *MockSync_SyncDeletedClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSync_SyncDeletedClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSync_SyncDeletedClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockSync_SyncDeletedClient) Send(arg0 *proto.SyncRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockSync_SyncDeletedClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSync_SyncDeletedClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockSync_SyncDeletedClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSync_SyncDeletedClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSync_SyncDeletedClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockSync_SyncDeletedClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockSync_SyncDeletedClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockSync_SyncDeletedClient)(nil).Trailer))
}

// MockSync_SyncUpdatedClient is a mock of Sync_SyncUpdatedClient interface.
type MockSync_SyncUpdatedClient struct {
	ctrl     *gomock.Controller
	recorder *MockSync_SyncUpdatedClientMockRecorder
}

// MockSync_SyncUpdatedClientMockRecorder is the mock recorder for MockSync_SyncUpdatedClient.
type MockSync_SyncUpdatedClientMockRecorder struct {
	mock *MockSync_SyncUpdatedClient
}

// NewMockSync_SyncUpdatedClient creates a new mock instance.
func NewMockSync_SyncUpdatedClient(ctrl *gomock.Controller) *MockSync_SyncUpdatedClient {
	mock := &MockSync_SyncUpdatedClient{ctrl: ctrl}
	mock.recorder = &MockSync_SyncUpdatedClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSync_SyncUpdatedClient) EXPECT() *MockSync_SyncUpdatedClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method.
func (m *MockSync_SyncUpdatedClient) CloseAndRecv() (*proto.SyncResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*proto.SyncResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv.
func (mr *MockSync_SyncUpdatedClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockSync_SyncUpdatedClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method.
func (m *MockSync_SyncUpdatedClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockSync_SyncUpdatedClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockSync_SyncUpdatedClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockSync_SyncUpdatedClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSync_SyncUpdatedClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSync_SyncUpdatedClient)(nil).Context))
}

// Header mocks base method.
func (m *MockSync_SyncUpdatedClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockSync_SyncUpdatedClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockSync_SyncUpdatedClient)(nil).Header))
}

// RecvMsg mocks base method.
func (m_2 *MockSync_SyncUpdatedClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSync_SyncUpdatedClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSync_SyncUpdatedClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockSync_SyncUpdatedClient) Send(arg0 *proto.SyncRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockSync_SyncUpdatedClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSync_SyncUpdatedClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockSync_SyncUpdatedClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSync_SyncUpdatedClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSync_SyncUpdatedClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockSync_SyncUpdatedClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockSync_SyncUpdatedClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockSync_SyncUpdatedClient)(nil).Trailer))
}

// MockSync_SyncCreatedClient is a mock of Sync_SyncCreatedClient interface.
type MockSync_SyncCreatedClient struct {
	ctrl     *gomock.Controller
	recorder *MockSync_SyncCreatedClientMockRecorder
}

// MockSync_SyncCreatedClientMockRecorder is the mock recorder for MockSync_SyncCreatedClient.
type MockSync_SyncCreatedClientMockRecorder struct {
	mock *MockSync_SyncCreatedClient
}

// NewMockSync_SyncCreatedClient creates a new mock instance.
func NewMockSync_SyncCreatedClient(ctrl *gomock.Controller) *MockSync_SyncCreatedClient {
	mock := &MockSync_SyncCreatedClient{ctrl: ctrl}
	mock.recorder = &MockSync_SyncCreatedClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSync_SyncCreatedClient) EXPECT() *MockSync_SyncCreatedClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method.
func (m *MockSync_SyncCreatedClient) CloseAndRecv() (*proto.SyncResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*proto.SyncResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv.
func (mr *MockSync_SyncCreatedClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockSync_SyncCreatedClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method.
func (m *MockSync_SyncCreatedClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockSync_SyncCreatedClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockSync_SyncCreatedClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockSync_SyncCreatedClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSync_SyncCreatedClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSync_SyncCreatedClient)(nil).Context))
}

// Header mocks base method.
func (m *MockSync_SyncCreatedClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockSync_SyncCreatedClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockSync_SyncCreatedClient)(nil).Header))
}

// RecvMsg mocks base method.
func (m_2 *MockSync_SyncCreatedClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSync_SyncCreatedClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSync_SyncCreatedClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockSync_SyncCreatedClient) Send(arg0 *proto.SyncRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockSync_SyncCreatedClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSync_SyncCreatedClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockSync_SyncCreatedClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSync_SyncCreatedClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSync_SyncCreatedClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockSync_SyncCreatedClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockSync_SyncCreatedClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockSync_SyncCreatedClient)(nil).Trailer))
}

// MockSyncServer is a mock of SyncServer interface.
type MockSyncServer struct {
	ctrl     *gomock.Controller
	recorder *MockSyncServerMockRecorder
}

// MockSyncServerMockRecorder is the mock recorder for MockSyncServer.
type MockSyncServerMockRecorder struct {
	mock *MockSyncServer
}

// NewMockSyncServer creates a new mock instance.
func NewMockSyncServer(ctrl *gomock.Controller) *MockSyncServer {
	mock := &MockSyncServer{ctrl: ctrl}
	mock.recorder = &MockSyncServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncServer) EXPECT() *MockSyncServerMockRecorder {
	return m.recorder
}

// Sync mocks base method.
func (m *MockSyncServer) Sync(arg0 *proto.SyncRequest, arg1 proto.Sync_SyncServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockSyncServerMockRecorder) Sync(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockSyncServer)(nil).Sync), arg0, arg1)
}

// SyncCreated mocks base method.
func (m *MockSyncServer) SyncCreated(arg0 proto.Sync_SyncCreatedServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncCreated", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncCreated indicates an expected call of SyncCreated.
func (mr *MockSyncServerMockRecorder) SyncCreated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncCreated", reflect.TypeOf((*MockSyncServer)(nil).SyncCreated), arg0)
}

// SyncDeleted mocks base method.
func (m *MockSyncServer) SyncDeleted(arg0 proto.Sync_SyncDeletedServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncDeleted", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncDeleted indicates an expected call of SyncDeleted.
func (mr *MockSyncServerMockRecorder) SyncDeleted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncDeleted", reflect.TypeOf((*MockSyncServer)(nil).SyncDeleted), arg0)
}

// SyncUpdated mocks base method.
func (m *MockSyncServer) SyncUpdated(arg0 proto.Sync_SyncUpdatedServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncUpdated", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncUpdated indicates an expected call of SyncUpdated.
func (mr *MockSyncServerMockRecorder) SyncUpdated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncUpdated", reflect.TypeOf((*MockSyncServer)(nil).SyncUpdated), arg0)
}

// mustEmbedUnimplementedSyncServer mocks base method.
func (m *MockSyncServer) mustEmbedUnimplementedSyncServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSyncServer")
}

// mustEmbedUnimplementedSyncServer indicates an expected call of mustEmbedUnimplementedSyncServer.
func (mr *MockSyncServerMockRecorder) mustEmbedUnimplementedSyncServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSyncServer", reflect.TypeOf((*MockSyncServer)(nil).mustEmbedUnimplementedSyncServer))
}

// MockUnsafeSyncServer is a mock of UnsafeSyncServer interface.
type MockUnsafeSyncServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeSyncServerMockRecorder
}

// MockUnsafeSyncServerMockRecorder is the mock recorder for MockUnsafeSyncServer.
type MockUnsafeSyncServerMockRecorder struct {
	mock *MockUnsafeSyncServer
}

// NewMockUnsafeSyncServer creates a new mock instance.
func NewMockUnsafeSyncServer(ctrl *gomock.Controller) *MockUnsafeSyncServer {
	mock := &MockUnsafeSyncServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeSyncServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeSyncServer) EXPECT() *MockUnsafeSyncServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedSyncServer mocks base method.
func (m *MockUnsafeSyncServer) mustEmbedUnimplementedSyncServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSyncServer")
}

// mustEmbedUnimplementedSyncServer indicates an expected call of mustEmbedUnimplementedSyncServer.
func (mr *MockUnsafeSyncServerMockRecorder) mustEmbedUnimplementedSyncServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSyncServer", reflect.TypeOf((*MockUnsafeSyncServer)(nil).mustEmbedUnimplementedSyncServer))
}

// MockSync_SyncServer is a mock of Sync_SyncServer interface.
type MockSync_SyncServer struct {
	ctrl     *gomock.Controller
	recorder *MockSync_SyncServerMockRecorder
}

// MockSync_SyncServerMockRecorder is the mock recorder for MockSync_SyncServer.
type MockSync_SyncServerMockRecorder struct {
	mock *MockSync_SyncServer
}

// NewMockSync_SyncServer creates a new mock instance.
func NewMockSync_SyncServer(ctrl *gomock.Controller) *MockSync_SyncServer {
	mock := &MockSync_SyncServer{ctrl: ctrl}
	mock.recorder = &MockSync_SyncServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSync_SyncServer) EXPECT() *MockSync_SyncServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockSync_SyncServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSync_SyncServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSync_SyncServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockSync_SyncServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSync_SyncServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSync_SyncServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockSync_SyncServer) Send(arg0 *proto.SyncResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockSync_SyncServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSync_SyncServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockSync_SyncServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockSync_SyncServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockSync_SyncServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockSync_SyncServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSync_SyncServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSync_SyncServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockSync_SyncServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockSync_SyncServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockSync_SyncServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockSync_SyncServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockSync_SyncServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockSync_SyncServer)(nil).SetTrailer), arg0)
}

// MockSync_SyncDeletedServer is a mock of Sync_SyncDeletedServer interface.
type MockSync_SyncDeletedServer struct {
	ctrl     *gomock.Controller
	recorder *MockSync_SyncDeletedServerMockRecorder
}

// MockSync_SyncDeletedServerMockRecorder is the mock recorder for MockSync_SyncDeletedServer.
type MockSync_SyncDeletedServerMockRecorder struct {
	mock *MockSync_SyncDeletedServer
}

// NewMockSync_SyncDeletedServer creates a new mock instance.
func NewMockSync_SyncDeletedServer(ctrl *gomock.Controller) *MockSync_SyncDeletedServer {
	mock := &MockSync_SyncDeletedServer{ctrl: ctrl}
	mock.recorder = &MockSync_SyncDeletedServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSync_SyncDeletedServer) EXPECT() *MockSync_SyncDeletedServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockSync_SyncDeletedServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSync_SyncDeletedServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSync_SyncDeletedServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockSync_SyncDeletedServer) Recv() (*proto.SyncRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*proto.SyncRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockSync_SyncDeletedServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockSync_SyncDeletedServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockSync_SyncDeletedServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSync_SyncDeletedServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSync_SyncDeletedServer)(nil).RecvMsg), m)
}

// SendAndClose mocks base method.
func (m *MockSync_SyncDeletedServer) SendAndClose(arg0 *proto.SyncResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose.
func (mr *MockSync_SyncDeletedServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockSync_SyncDeletedServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method.
func (m *MockSync_SyncDeletedServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockSync_SyncDeletedServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockSync_SyncDeletedServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockSync_SyncDeletedServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSync_SyncDeletedServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSync_SyncDeletedServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockSync_SyncDeletedServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockSync_SyncDeletedServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockSync_SyncDeletedServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockSync_SyncDeletedServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockSync_SyncDeletedServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockSync_SyncDeletedServer)(nil).SetTrailer), arg0)
}

// MockSync_SyncUpdatedServer is a mock of Sync_SyncUpdatedServer interface.
type MockSync_SyncUpdatedServer struct {
	ctrl     *gomock.Controller
	recorder *MockSync_SyncUpdatedServerMockRecorder
}

// MockSync_SyncUpdatedServerMockRecorder is the mock recorder for MockSync_SyncUpdatedServer.
type MockSync_SyncUpdatedServerMockRecorder struct {
	mock *MockSync_SyncUpdatedServer
}

// NewMockSync_SyncUpdatedServer creates a new mock instance.
func NewMockSync_SyncUpdatedServer(ctrl *gomock.Controller) *MockSync_SyncUpdatedServer {
	mock := &MockSync_SyncUpdatedServer{ctrl: ctrl}
	mock.recorder = &MockSync_SyncUpdatedServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSync_SyncUpdatedServer) EXPECT() *MockSync_SyncUpdatedServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockSync_SyncUpdatedServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSync_SyncUpdatedServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSync_SyncUpdatedServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockSync_SyncUpdatedServer) Recv() (*proto.SyncRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*proto.SyncRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockSync_SyncUpdatedServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockSync_SyncUpdatedServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockSync_SyncUpdatedServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSync_SyncUpdatedServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSync_SyncUpdatedServer)(nil).RecvMsg), m)
}

// SendAndClose mocks base method.
func (m *MockSync_SyncUpdatedServer) SendAndClose(arg0 *proto.SyncResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose.
func (mr *MockSync_SyncUpdatedServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockSync_SyncUpdatedServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method.
func (m *MockSync_SyncUpdatedServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockSync_SyncUpdatedServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockSync_SyncUpdatedServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockSync_SyncUpdatedServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSync_SyncUpdatedServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSync_SyncUpdatedServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockSync_SyncUpdatedServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockSync_SyncUpdatedServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockSync_SyncUpdatedServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockSync_SyncUpdatedServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockSync_SyncUpdatedServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockSync_SyncUpdatedServer)(nil).SetTrailer), arg0)
}

// MockSync_SyncCreatedServer is a mock of Sync_SyncCreatedServer interface.
type MockSync_SyncCreatedServer struct {
	ctrl     *gomock.Controller
	recorder *MockSync_SyncCreatedServerMockRecorder
}

// MockSync_SyncCreatedServerMockRecorder is the mock recorder for MockSync_SyncCreatedServer.
type MockSync_SyncCreatedServerMockRecorder struct {
	mock *MockSync_SyncCreatedServer
}

// NewMockSync_SyncCreatedServer creates a new mock instance.
func NewMockSync_SyncCreatedServer(ctrl *gomock.Controller) *MockSync_SyncCreatedServer {
	mock := &MockSync_SyncCreatedServer{ctrl: ctrl}
	mock.recorder = &MockSync_SyncCreatedServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSync_SyncCreatedServer) EXPECT() *MockSync_SyncCreatedServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockSync_SyncCreatedServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSync_SyncCreatedServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSync_SyncCreatedServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockSync_SyncCreatedServer) Recv() (*proto.SyncRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*proto.SyncRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockSync_SyncCreatedServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockSync_SyncCreatedServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockSync_SyncCreatedServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSync_SyncCreatedServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSync_SyncCreatedServer)(nil).RecvMsg), m)
}

// SendAndClose mocks base method.
func (m *MockSync_SyncCreatedServer) SendAndClose(arg0 *proto.SyncResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose.
func (mr *MockSync_SyncCreatedServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockSync_SyncCreatedServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method.
func (m *MockSync_SyncCreatedServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockSync_SyncCreatedServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockSync_SyncCreatedServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockSync_SyncCreatedServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSync_SyncCreatedServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSync_SyncCreatedServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockSync_SyncCreatedServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockSync_SyncCreatedServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockSync_SyncCreatedServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockSync_SyncCreatedServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockSync_SyncCreatedServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockSync_SyncCreatedServer)(nil).SetTrailer), arg0)
}
